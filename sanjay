import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import gradio as gr

# 1. Load Data
df = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00320/student-mat.csv", sep=';')

# 2. Feature Engineering
df['total_alcohol'] = df['Dalc'] + df['Walc']
df['higher_edu'] = np.where((df['Medu'] >= 3) & (df['Fedu'] >= 3), 'yes', 'no')

# Drop target leakage and less relevant features
X = df.drop(['G3', 'G1', 'G2'], axis=1)
y = df['G3']

# Include G1 and G2 manually
X['G1'] = df['G1']
X['G2'] = df['G2']

# 3. Preprocessing
X = pd.get_dummies(X, drop_first=True)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 4. Split Data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 5. Train Models
lr = LinearRegression()
lr.fit(X_train, y_train)

rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, y_train)

# 6. Evaluate Models
def evaluate(model, X_test, y_test):
    pred = model.predict(X_test)
    return {
        'MAE': mean_absolute_error(y_test, pred),
        'RMSE': np.sqrt(mean_squared_error(y_test, pred)),
        'RÂ²': r2_score(y_test, pred)
    }

print("Linear Regression:", evaluate(lr, X_test, y_test))
print("Random Forest:", evaluate(rf, X_test, y_test))

# 7. Gradio Interface
def predict_grade(G1, G2, studytime, failures, absences, total_alcohol):
    # Create a row with default values
    input_data = pd.DataFrame([{
        'G1': G1,
        'G2': G2,
        'studytime': studytime,
        'failures': failures,
        'absences': absences,
        'total_alcohol': total_alcohol
    }])
    input_scaled = scaler.transform(pd.get_dummies(input_data.reindex(columns=X.columns, fill_value=0)))
    pred = rf.predict(input_scaled)
    return float(pred[0])

# Define Gradio UI
inputs = [
    gr.Slider(0, 20, label="G1"),
    gr.Slider(0, 20, label="G2"),
    gr.Slider(1, 4, step=1, label="Study Time"),
    gr.Slider(0, 3, step=1, label="Failures"),
    gr.Slider(0, 30, step=1, label="Absences"),
    gr.Slider(2, 10, step=1, label="Total Alcohol (Dalc + Walc)")
]

gr.Interface(fn=predict_grade, inputs=inputs, outputs="number", title="Student Grade Predictor").launch()
